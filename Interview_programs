Try checking this out - https://leetcode.com/list/xb4m49lh


1. Remove all occurances of a value in a single linked list.

void remove(struct llnode **head, int val)
{
    struct llnode *trav, *prev, *del;
    trav = prev = NULL;
    while (trav) {
          if (trav->data == val) {
              del = trav;
          }
          if (!del) {
              if (!prev) {
                  *head = trav;
              }
              prev = trav;
          }
          trav = trav->next;
          if (del) {
              free(del);
              del = NULL;
              if (prev) {
                  prev->next = trav;
          }
    }
    if (!prev) {
        *head = NULL;
    }
}

or:
void remove(Lnode **head, int val)
{
     Lnode *cur, *prev;
     cur = *head;
     while (cur) {
          if(cur->data == val) {
	  	if (prev) {
			prev->next = cur->next;
			free(cur);
			cur = prev->next;
	        } else {
			*head = cur->next;
			free(cur);
			cur = *head;
	  } else {
	  	prev = cur;
		cur = cur->next;
	  }
     }
     return;
}
	 


2. Maximum Subarray
 Find the contiguous subarray within an array (containing at least one number) which has the largest sum.For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
 the contiguous subarray [4,-1,2,1] has the largest sum = 6.
 
 /* a = array of nos, len = length of the array, lindex = left index of subaray, rindex = right index of subarray */
 void subarr(int *a, int len, int *lindex, int *rindex)
 {
    int ws = i = j = 0;
    int max = MINMAX or -2 pow 32-1. 
    while (j < len) {
        ws += a[j];
        if (ws > max) {
            max = ws;
            *lindex = i;
            *rindex = j;
        }
        j++;
        while (i < j && ws < 0) {
            ws -= a[i];
            i++;
        }
    }
    return;
 }
 
3. Given an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).Example 1:
Input: [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. 
Even though [1,3,5,7] is also an increasing subsequence, it’s not a continuous one where 5 and 7 are separated by 4.Example 2:
Input: [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2], its length is 1.

int func(int *a, int len)
{
    int i = j = count = 0;
    while (j < len) {
        j++;
        count = MAX(count, j-i);
        if (j < len && a[j] <= a[j-1]) {
            i = j;  /* Resetting i to j */
        }
    }
    return(count);
 }
 
 4. Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.Example:Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.

int func(int *a, int len, int sum)
{
    int i = j = cursum = 0;
    while (j < len) {
        cursum += j;
        j++;
        while (i < j && cursum >= sum) {
            minlen = MIN(minlen, (j - i));
            cursum -= a[i];
            i++;
        }
    }
    if (minlen < len+1) 
        return (minlen);
    else 
        return 0;
}

5. Given a string, find the length of the longest substring without repeating characters.
Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 

Example 2:
Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3: Input: "pwwkew". ans = 3.

#define MAX(a,b)  (a)>(b)?(a):(b)
int lengthOfLongestSubstring(char * s)
{
    int i, j, ans, len;
    int LT[256] = { 0 };
    
    len = strlen(s);
    i = j = ans = 0;
    while (j < len) {
        if (!LT[s[j]]) {
            LT[s[j]]++;
        } else {
            ans = MAX(ans, j-i);
            while (s[i] != s[j]) {
                LT[s[i]] = 0;
                i++;
            }
            i++;
        }
        j++;
    }
    ans = MAX(ans, len-i);
    return ans;
}

6. Group all anagrams together. 
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2:

Input: strs = [""]
Output: [[""]]

Example 3:

Input: strs = ["a"]
Output: [["a"]]


#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int char_cmp(const void *a, const void *b)
{   
    return (*(char *)a - *(char *)b);
}

int string_cmp(const void *a, const void *b)
{   
    const char **ia = (const char **)a;
    const char **ib = (const char **)b;
    return strcmp(*ia, *ib);
}

int main(int argc, char **argv)
{
    int len = argc-1;
    int i;
    char *words[len];
    for (int i=0; i<len; i++) {
        words[i]=argv[i+1];
    }

    /* for (int i=0; i<len; i++) {
        words[i][0] = 'A';
    }*/
    printf("\n Before sort");
    printf("\n");
    for (i=0; i<len; i++) {
        printf("words[%d] = %s,  ", i, words[i]);
    }
    printf("\n Sorting each word\n");

    for (i=0; i<len; i++) {
        qsort(words[i], strlen(words[i]), sizeof(char), char_cmp);
    }
    for (i=0; i<len; i++) {
        printf("words[%d] = %s,  ", i, words[i]);
    }

    printf("\n");
    qsort(words, len, sizeof(char *), string_cmp);
    printf("After sort\n");
    for (i=0; i<len; i++) {
        printf("words[%d] = %s,  ", i, words[i]);
    }
    printf("\n");
    return 0;
}
-> now do strncmp() of each words & print the anagrams. 


7. Find longest palindrome substring. 
Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example 2:
Input: "cbbd"
Output: "bb"

Time complexity : O(n*n). Since expanding a palindrome around its center could take O(n) time, the overall complexity is O(n*n)
Space complexity : O(1). 
int longestPalindrome(char *s, int len, char *res) {
    if (!s || len < 1) { 
        return NULL;
    }
    
    int start = 0, end = 0;
    for (int i = 0; i < len; i++) {
        int len1 = expandAroundCenter(s, len, i, i);
        int len2 = expandAroundCenter(s, len, i, i + 1);
        int len = MAX(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    strncpy(res, s[start], ((end+1)-start));
    return (end+1 - start);
}

int expandAroundCenter(char *s, int len, int left, int right) {
    int L = left, R = right;
    while ((L >= 0) && (R < len) && (s[L] == s[R])) {
        L--;
        R++;
    }
    return (R - L - 1);
}

8. Tree traversals using only stacks.
Why?
- using stacks means you are using DFS mehtod. The advantage comes from space complexity wherein the assumption is that a tree is more wider than is deeper. 
So by using queues we need to store all the current level nodes before moving to the next level (something like level order traversal). 

A) inorder traversal.

void inOrderTraversal(Node *root)
{
	struct stack *S = createStack(capacity = number of nodes in the tree);
	struct tnode *cur = root;

	/* Note unlike others, the stack is empty while entering the while loop & the 1st
	 * node gets pushed inside the while loop
	 */
	while (!isEmpty(S) || curr != NULL)
	{       
		/* Loop over untill all the left nodes are pushed to the stack */
		if (curr != NULL)
		{
			push(S, cur);
			curr = curr->left;
		}
		else // If the curr node is NULL.
		{
			curr = pop(S) 
			printf("%d\t", curr);
			curr = curr->right; 
		}
	}
}

B)  Postorder traversal

void postorder(struct tnode *root)
{
	struct stack *S = createStack(number of nodes in tree);
	struct tnode *cur = root;
	struct tnode *prev = NULL;
	
	while (!isEmpty(S) || cur != NULL) {
		if(cur != NULL) {  /* Keep pushing the left elements */
			push(S, cur);
			cur = cur->left 
		} else {
			/* we are now processing elements on the way back */
			cur = peek(S);  /* fetch the stack top, dont pop it yet */
			if (cur->right == NULL || cur->right == prev) {
				printf("%d\t", cur);
				prev = pop(S);
				cur = NULL;
			} else {
				/* Traverse the right elements */
				cur = cur->right;
			}
		}
	}
}

C) Preorder traversal   (easiest of all)
void preorder(tnode *root) 
{
	struct stack *S = createStack(number of nodes in tree);
	tnode *cur = root;
	
	push(S, cur);
	while(!isEmpty(S)) {
		cur = pop(S);
		printf("%d\t", cur);
		if(cur->right) 
			push(S, cur->right);
		if(cur->left)
			push(S, cur->left);
	}
}

D) Level order traversal
   I flunked once in Facebook interview for solving this in BFS approach (i.e using Queues). Itseems I was supposed to use DFS (i.e stacks). But it is unclear that priority was 
   given to space complexity over time complexity. I believe it was foolish of the interviewer to expect DFS for a concept which is BFS. 
   
   /* its same as preorder traversal except that you use queues instead of stack & push the left child first & then the right child */
   void levelorder(tnode *root)
   {
   	struct queue *Q = createQueue(size = number of elements of tree);
	/* It is understood that dequeue happens from front & enqueue happens at tail */
	tnode *cur = root;
	enqueue(Q, cur);
	while (!isEmpty(Q)) {
		cur = dequeue(Q);
		printf("%d\t", cur);
		if (cur->left) {
			enqueue(Q, cur->left);
		}
		if (cur->right) {
			enqueue(Q, cur->right)
		}
	}
  }
	
			
