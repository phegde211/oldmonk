Try checking this out - https://leetcode.com/list/xb4m49lh


1. Remove all occurances of a value in a single linked list.

void remove(struct llnode **head, int val)
{
    struct llnode *trav, *prev, *del;
    trav = prev = NULL;
    while (trav) {
          if (trav->data == val) {
              del = trav;
          }
          if (!del) {
              if (!prev) {
                  *head = trav;
              }
              prev = trav;
          }
          trav = trav->next;
          if (del) {
              free(del);
              del = NULL;
              if (prev) {
                  prev->next = trav;
          }
    }
    if (!prev) {
        *head = NULL;
    }
}


2. Maximum Subarray
 Find the contiguous subarray within an array (containing at least one number) which has the largest sum.For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
 the contiguous subarray [4,-1,2,1] has the largest sum = 6.
 
 /* a = array of nos, len = length of the array, lindex = left index of subaray, rindex = right index of subarray */
 void subarr(int *a, int len, int *lindex, int *rindex)
 {
    int ws = i = j = 0;
    int max = MINMAX or -2 pow 32-1. 
    while (j < len) {
        ws += a[j];
        if (ws > max) {
            max = ws;
            *lindex = i;
            *rindex = j;
        }
        j++;
        while (i < j && ws < 0) {
            ws -= a[i];
            i++;
        }
    }
    return;
 }
 
3. Given an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).Example 1:
Input: [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. 
Even though [1,3,5,7] is also an increasing subsequence, it’s not a continuous one where 5 and 7 are separated by 4.Example 2:
Input: [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2], its length is 1.

int func(int *a, int len)
{
    int i = j = count = 0;
    while (j < len) {
        j++;
        count = MAX(count, j-i);
        if (j < len && a[j] <= a[j-1]) {
            i = j;  /* Resetting i to j */
        }
    }
    return(count);
 }
 
 4. Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.Example:Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.

int func(int *a, int len, int sum)
{
    int i = j = cursum = 0;
    while (j < len) {
        cursum += j;
        j++;
        while (i < j && cursum >= sum) {
            minlen = MIN(minlen, (j - i));
            cursum -= a[i];
            i++;
        }
    }
    if (minlen < len+1) 
        return (minlen);
    else 
        return 0;
}

5. Given a string, find the length of the longest substring without repeating characters.
Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 

Example 2:
Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.


#define MAX(a,b)  (a)>(b)?(a):(b)

int lengthOfLongestSubstring(char * s){
    int i, j, maxC, count;
    int a[256];
    i = j = 0;
    maxC = 0;
    memset(a, -1, 256);
    while (*s != '\0') {
        if ((a[s[j]] >= 0) && (i <= a[s[j]])) {
            i = a[s[j]]+1;
            a[sj]] = j;
            j++;
            countinue;
        }
        a[s[j]] = j;
        count = (j -i)+1;
        j++;
        maxC = MAX(maxC, count);
    }

6. Group all anagrams together. 
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2:

Input: strs = [""]
Output: [[""]]

Example 3:

Input: strs = ["a"]
Output: [["a"]]


#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int char_cmp(const void *a, const void *b)
{   
    return (*(char *)a - *(char *)b);
}

int string_cmp(const void *a, const void *b)
{   
    const char **ia = (const char **)a;
    const char **ib = (const char **)b;
    return strcmp(*ia, *ib);
}

int main(int argc, char **argv)
{
    int len = argc-1;
    int i;
    char *words[len];
    for (int i=0; i<len; i++) {
        words[i]=argv[i+1];
    }

    /* for (int i=0; i<len; i++) {
        words[i][0] = 'A';
    }*/
    printf("\n Before sort");
    printf("\n");
    for (i=0; i<len; i++) {
        printf("words[%d] = %s,  ", i, words[i]);
    }
    printf("\n Sorting each word\n");

    for (i=0; i<len; i++) {
        qsort(words[i], strlen(words[i]), sizeof(char), char_cmp);
    }
    for (i=0; i<len; i++) {
        printf("words[%d] = %s,  ", i, words[i]);
    }

    printf("\n");
    qsort(words, len, sizeof(char *), string_cmp);
    printf("After sort\n");
    for (i=0; i<len; i++) {
        printf("words[%d] = %s,  ", i, words[i]);
    }
    printf("\n");
    return 0;
}
-> now do strncmp() of each words & print the anagrams. 
